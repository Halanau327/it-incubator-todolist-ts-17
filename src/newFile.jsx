// 8)
//
// import ReactDOM from "react-dom/client"
// import { ThunkAction, ThunkDispatch } from "redux-thunk"
// import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from "react-redux"
// import React, { useEffect } from "react"
// import axios from "axios"
// import { configureStore, combineReducers } from "@reduxjs/toolkit"
//
// // Styles
// const table: React.CSSProperties = {
//   borderCollapse: "collapse",
//   width: "100%",
//   tableLayout: "fixed",
// }
//
// const th: React.CSSProperties = {
//   padding: "10px",
//   border: "1px solid black",
//   background: "lightgray",
//   cursor: "pointer",
// }
//
// const td: React.CSSProperties = {
//   padding: "10px",
//   border: "1px solid black",
// }
//
// // Types
// type UserType = {
//   id: string
//   name: string
//   age: number
// }
//
// type UsersResponseType = {
//   items: UserType[]
//   totalCount: number
// }
//
// // API
// const instance = axios.create({ baseURL: "https://exams-frontend.kimitsu.it-incubator.io/api/" })
//
// const api = {
//   getUsers() {
//     return instance.get<UsersResponseType>("users")
//   },
// }
//
// // Reducer
// const initState = {
//   users: [] as UserType[],
// }
// type InitStateType = typeof initState
//
// const appReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
//   switch (action.type) {
//     case "SET_USERS":
//       return { ...state, users: action.users }
//     default:
//       return state
//   }
// }
//
// // Store
// const rootReducer = combineReducers({ app: appReducer })
//
// const store = configureStore({ reducer: rootReducer })
// type RootState = ReturnType<typeof store.getState>
//   type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>
// type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>
// const useAppDispatch = () => useDispatch<AppDispatch>()
// const useAppSelector: TypedUseSelectorHook<RootState> = useSelector
//
// const setUsersAC = (users: UserType[]) => ({ type: "SET-USERS", users })
// type ActionsType = ReturnType<typeof setUsersAC>
//
// // Thunk
// const getUsersTC = (): AppThunk => (dispatch, getState) => {
//   api.getUsers().then((res) => dispatch(setUsersAC(res.data.items)))
// }
//
// // Components
// export const Users = () => {
//   const users = useAppSelector((state) => state.app.users)
//
//   const dispatch = useAppDispatch()
//
//   useEffect(() => {
//     dispatch(getUsersTC())
//   }, [])
//
//   return (
//     <div>
//       <h1>üë™ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h1>
//       <table style={table}>
//         <thead>
//         <tr>
//           <th style={th}> Name</th>
//           <th style={th}> Age</th>
//         </tr>
//         </thead>
//         <tbody>
//         {users.map((u) => (
//           <tr key={u.id}>
//             <td style={td}>{u.name}</td>
//             <td style={td}>{u.age}</td>
//           </tr>
//         ))}
//         </tbody>
//       </table>
//     </div>
//   )
// }
//
// const root = ReactDOM.createRoot(document.getElementById("root") as HTMLElement)
// root.render(
//   <Provider store={store}>
//     <Users />
//   </Provider>,
// )
//
// // üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// // –ü–µ—Ä–µ–¥ –≤–∞–º–∏ –ø—É—Å—Ç–∞—è —Ç–∞–±–ª–∏—Ü–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –ø–æ–¥–≥—Ä—É–∑–∏–ª–∏—Å—å, —Ç.–∫. –≤ –∫–æ–¥–µ –¥–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞
// // –í–∞—à–∞ –∑–∞–¥–∞—á–∞ –Ω–∞–π—Ç–∏ –±–∞–≥—É, —á—Ç–æ–±—ã —Ç–∞–±–ª–∏—Ü–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –ø–æ–¥–≥—Ä—É–∑–∏–ª–∞—Å—å.
// // –í –∫–∞—á–µ—Å—Ç–≤–µ —É–∫–∞–∂–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∫–æ–¥–∞
// // ‚ùó –ï—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ä–µ—à–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏, –≤ –æ—Ç–≤–µ—Ç–∞—Ö —É—á—Ç–µ–Ω—ã —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
//
// // üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {users.map(u)=> —Ç–∞–±–ª–∏—Ü–∞ –æ—Ç—Ä–∏—Å—É–π—Å—è –í–ñ–£–• –í–ñ–£–•}
//
//
// 6)
// import React from "react";
// import ReactDOM from "react-dom/client";
// import { ThunkAction, ThunkDispatch } from "redux-thunk";
// import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from "react-redux";
// import { configureStore, combineReducers } from "@reduxjs/toolkit";
//
// // Reducer
// const initState = {
//   work: 0,
//   donate: 0,
//   balance: 0,
// };
// type InitStateType = typeof initState;
//
// const appReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
//   switch (action.type) {
//     case "CHANGE_VALUE":
//       return {
//         ...state,
//         ...action.payload,
//       };
//     default:
//       return state;
//   }
// };
//
// // Store
// const rootReducer = combineReducers({ app: appReducer });
//
// const store = configureStore({ reducer: rootReducer });
// type RootState = ReturnType<typeof store.getState>;
// type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>;
// type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>;
// const useAppDispatch = () => useDispatch<AppDispatch>();
// const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;
//
// const changeValue = (payload: any) => ({ type: "CHANGE_VALUE", payload }) as const;
// type ActionsType = ReturnType<typeof changeValue>;
//
// // Components
// export const Income = () => {
//   const work = useAppSelector((state) => state.app.work);
//   const donate = useAppSelector((state) => state.app.donate);
//   const balance = useAppSelector((state) => state.app.balance);
//
//   const dispatch = useAppDispatch();
//
//   return (
//     <div>
//       <div>
//         work:{" "}
//         <input
//           value={work}
//           type={"number"}
//           onChange={(e) => dispatch(changeValue({ work: +e.target.value }))}
//         />
//       </div>
//       <div>
//         donate:{" "}
//         <input
//           value={donate}
//           type={"number"}
//           onChange={(e) => dispatch(changeValue({ donate: +e.target.value }))}
//         />
//       </div>
//
//       <h1>üíµ balance: {balance}</h1>
//       <button
//         onClick={() => {
//           // ‚ùó‚ùó‚ùó XXX ‚ùó‚ùó‚ùó
//         }}
//       >
//         calculate balance
//       </button>
//     </div>
//   );
// };
//
// const root = ReactDOM.createRoot(document.getElementById("root") as HTMLElement);
// root.render(
//   <Provider store={store}>
//     <Income />
//   </Provider>,
// );
//
// // üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// // –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ XXX, —á—Ç–æ–±—ã –≤—ã–≤–µ–ª–∞—Å—å —Å—É–º–º–∞ –¥–æ—Ö–æ–¥–∞ –≤ —Å—Ç—Ä–æ–∫–µ –±–∞–ª–∞–Ω—Å–∞
// //
// // üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: console.log(work + donate)
//
//
// 3)
//
// import React, { useState } from "react";
// import ReactDOM from "react-dom/client";
// import { ThunkAction, ThunkDispatch } from "redux-thunk";
// import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from "react-redux";
// import { configureStore, combineReducers } from "@reduxjs/toolkit";
//
// // Styles
// const modal: React.CSSProperties = {
//   position: "fixed",
//   zIndex: 1,
//   left: 0,
//   top: 0,
//   width: "100%",
//   height: "100%",
//   overflow: "auto",
//   backgroundColor: "rgba(23,26,38,0.26)",
// };
//
// const modalContent: React.CSSProperties = {
//   backgroundColor: "#fefefe",
//   margin: "15% auto",
//   padding: "20px",
//   border: "1px solid #888",
//   width: "80%",
// };
//
// // Reducer
// const initState = { tasks: [] as any[] };
// type InitStateType = typeof initState;
//
// const appReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
//   switch (action.type) {
//     case "ADD_TASK":
//       return {
//         ...state,
//         tasks: [action.task, ...state.tasks],
//       };
//     case "CHANGE_TASK":
//       return {
//         ...state,
//         tasks: [action.task, ...state.tasks.filter((t: any) => t.id !== action.task.id)],
//       };
//     default:
//       return state;
//   }
// };
//
// // Store
// const rootReducer = combineReducers({ app: appReducer });
//
// const store = configureStore({ reducer: rootReducer });
// type RootState = ReturnType<typeof store.getState>;
// type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>;
// type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>;
// const useAppDispatch = () => useDispatch<AppDispatch>();
// const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;
//
// const addTask = (task: any) => ({ type: "ADD_TASK", task }) as const;
// const changeTask = (task: any) => ({ type: "CHANGE_TASK", task }) as const;
// type ActionsType = ReturnType<typeof addTask> | ReturnType<typeof changeTask>;
//
// // Components
// const Modal = (props: any) => {
//   const [value, setValue] = useState(props.task?.name || "");
//
//   return (
//     <div style={modalContent}>
//       modal:
//       <input value={value} onChange={(e) => setValue(e.target.value)} />
//       <button onClick={() => props.callback(value)}>{props.title}</button>
//     </div>
//   );
// };
//
// const Task = (props: any) => {
//   const [show, setShow] = useState(false);
//
//   return (
//     <div>
//       {props.task.name}
//       <button onClick={() => setShow(true)}>change</button>
//       {show && (
//         <Modal
//           callback={(value: string) => {
//             props.change(value);
//             setShow(false);
//           }}
//           title={"change"}
//         />
//       )}
//     </div>
//   );
// };
//
// export const Todolist = () => {
//   const tasks = useAppSelector((state) => state.app.tasks);
//   const dispatch = useAppDispatch();
//   const [show, setShow] = useState(false);
//
//   const getId = () => tasks.reduce((acc: number, t: any) => (acc > t.id ? acc : t.id), 0) + 1;
//
//   const mapped = tasks.map((t: any) => (
//     <Task
//       key={t.id}
//       task={t}
//       change={(value: string) => dispatch(changeTask({ id: t.id, name: value }))}
//     />
//   ));
//
//   return (
//     <div style={modal}>
//       <button onClick={() => setShow(true)}>open modal</button>
//       {show && (
//         <Modal
//           callback={(value: string) => {
//             dispatch(addTask({ id: getId(), name: value }));
//             setShow(false);
//           }}
//           title={"add"}
//         />
//       )}
//       {mapped}
//     </div>
//   );
// };
//
// const root = ReactDOM.createRoot(document.getElementById("root") as HTMLElement);
// root.render(
//   <Provider store={store}>
//     <Todolist />
//   </Provider>,
// );
//
// // üìú–û–ø–∏—Å–∞–Ω–∏–µ:
// // –û—Ç–∫—Ä–æ–π—Ç–µ –º–æ–¥–∞–ª–∫—É –∏ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å —Ç–µ–∫—Å—Ç.
// // –¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç.
// // –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç–∞—Å–∫–∏ –≤ –∏–Ω–ø—É—Ç–µ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ.
// // –í–∞—à–∞ –∑–∞–¥–∞—á–∞ –ø–æ—á–∏–Ω–∏—Ç—å —ç—Ç–æ –ø–æ–≤–µ–¥–µ–Ω–∏–µ.
// //
// // –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ —É–∫–∞–∂–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –∫–æ–¥–∞, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å,
// // —á—Ç–æ–±—ã —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É
// //
// // üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: defaultValue={value}
