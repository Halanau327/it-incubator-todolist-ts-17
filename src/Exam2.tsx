// // 1)

// import axios from "axios"
// import React, { useEffect, useState } from "react"
// import ReactDOM from "react-dom/client"
//
// type UserType = {
//   id: string
//   name: string
//   age: number
// }
//
// // API
// const instance = axios.create({ baseURL: "https://exams-frontend.kimitsu.it-incubator.io/api/" })
//
// const api = {
//   getUsers() {
//     return instance.get("users", {
//       params: {
//         pageSize: 3,
//         pageNumber: 2,
//       },
//     })
//   },
// }
//
// // App
// export const App = () => {
//   const [users, setUsers] = useState<UserType[]>([])
//
//   useEffect(() => {
//     api.getUsers().then((res) => {
//       setUsers(res.data.items)
//     })
//   }, [])
//
//   return (
//     <>
//       <h1>üë™ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h1>
//       {users.map((u) => {
//         return (
//           <div style={{ display: "flex", gap: "10px" }} key={u.id}>
//             <p>
//               <b>name</b>: {u.name}
//             </p>
//             <p>
//               <b>age</b>: {u.age}
//             </p>
//           </div>
//         )
//       })}
//     </>
//   )
// }
//
// const root = ReactDOM.createRoot(document.getElementById("root") as HTMLElement)
// root.render(<App />)

// // // üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// // –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω —Å–ø–∏—Å–æ–∫ —é–∑–µ—Ä–æ–≤ –∏–∑ 3-—á–µ–ª–æ–≤–µ–∫.
// // –ü–æ–¥–≥—Ä—É–∑–∏–ª–∏—Å—å –∏–º–µ–Ω–Ω–æ —ç—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ —Å–ª—É—á–∞–π–Ω–æ, –∞ –∏–∑-–∑–∞ query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≤ –∑–∞–ø—Ä–æ—Å–µ.
// // –í–∞—à–∞ –∑–∞–¥–∞—á–∞ –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å —Å—Ç—Ä–æ–∫—É —Å –∑–∞–ø—Ä–æ—Å–æ–º —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–≤—Å–µ —Ç–µ—Ö –∂–µ —é–∑–µ—Ä–æ–≤),
// // –ø—Ä–∏ —ç—Ç–æ–º –∑–∞–ø—Ä–µ—â–µ–Ω–æ –≤ –æ—Ç–≤–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏–º–≤–æ–ª—ã –≤–æ–ø—Ä–æ—Å–∞ –∏ –∞–º–ø–µ—Ä—Å–∞–Ω–¥–∞.
// // –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∫–æ–¥—É (–ø–µ—Ä–µ–Ω–æ—Å—ã —Ä–∞–∑—Ä–µ—à–µ–Ω—ã)
// //
// //
// // // üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: return instance.get('users=pageSize=3=pageNumber=2')


// 3) +
import ReactDOM from "react-dom/client"
import React, { useEffect } from "react"
import { ThunkAction, ThunkDispatch } from "redux-thunk"
import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from "react-redux"
import { configureStore, combineReducers } from "@reduxjs/toolkit"

// // Reducer
// const initState = { find: "", words: [] as string[] }
// type InitStateType = typeof initState
//
// const appReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
//   switch (action.type) {
//     case "SET_FIND":
//       return { ...state, find: action.find }
//     case "SET_WORDS":
//       return { ...state, words: action.words }
//     default:
//       return state
//   }
// }

// Store
// const rootReducer = combineReducers({ app: appReducer })
//
// const store = configureStore({ reducer: rootReducer })
// type RootState = ReturnType<typeof store.getState>
// type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>
// type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>
// const useAppDispatch = () => useDispatch<AppDispatch>()
// const useAppSelector: TypedUseSelectorHook<RootState> = useSelector
//
// const setFind = (find: string) => ({ type: "SET_FIND", find }) as const
// const setWords = (words: string[]) => ({ type: "SET_WORDS", words }) as const
// type ActionsType = ReturnType<typeof setFind> | ReturnType<typeof setWords>
//
// // Components
// const defWords = ["a", "ab", "abc", "b", "bc", "c", "d", "ac", "bcd", "cd", "abcd", "bd"]
//
// export const App = () => {
//   const find = useAppSelector((state) => state.app.find)
//   const words = useAppSelector((state) => state.app.words)
//
//   const dispatch = useAppDispatch()
//
//   useEffect(() => {
//     dispatch(setWords(defWords))
//   }, [])
//
//   const mapped = words
//     .filter((w: string) => new RegExp(find, "gi").test(w))
//     .map((w: string, i: number) => <div key={i}>{w}</div>)
//
//   const onChangeHandler = (value: string) => {
//     dispatch(setFind(value))
//   }
//
//   return (
//     <div>
//       <input value={find} onChange={(e) => onChangeHandler(e.target.value)} />
//       {mapped}
//     </div>
//   )
// }
//
// const root = ReactDOM.createRoot(document.getElementById("root") as HTMLElement)
// root.render(
//   <Provider store={store}>
//     <App />
//   </Provider>,
// )

// // üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// // –ù–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω –º–∞—Å—Å–∏–≤ —Å–ª–æ–≤.
// // –í–∞—à–∞ –∑–∞–¥–∞—á–∞ –ø–æ—á–∏–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é:
// // –≤–≤–æ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª—ã –≤ input –∏ —Å—Ä–∞–∑—É –≤–∏–¥–∏—Ç–µ –∫–∞–∫ —Ñ–∏–ª—å—Ç—Ä—É—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ.
// // –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—Ç—Ä–æ–∫–∏.
// //
// // üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: dispatch(setFind(defWords))

//
//
//
// 4) +
// import React from 'react'
// import ReactDOM from 'react-dom/client';
//
// export const App = () => {
//   return (
//     <div>
//       <h2>–°–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ –≤–µ—Ç–æ–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ ?</h2>
//       <ul>
//         <li>1 - 2 –≤–µ—Ç–∫–∏. master(main) –∏ develop</li>
//         <li>2 - –ß–∏—Å–ª–æ –≤–µ—Ç–æ–∫ —Å–æ–≥–ª–∞—Å–æ–≤—ã–≤–∞–µ—Ç—Å—è –≤ –∫–æ–º–∞–Ω–¥–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –≤ git config</li>
//         <li>3 - –í—Å–µ–≥–¥–∞ –µ—Å—Ç—å –≤–µ—Ç–∫–∞ master (main), develop –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤. –ü–æ–¥ –∫–∞–∂–¥—É—é —Ñ–∏—á—É
//           —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤–∞—è –≤–µ—Ç–∫–∞. –ü—Ä–∏ —ç—Ç–æ–º –æ—Ç –≤–µ—Ç–∫–∏ —Å —Ñ–∏—á–µ–π –∑–∞–ø—Ä–µ—â–µ–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ –≤–µ—Ç–∫–∏</li>
//         <li>4 - –ù–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞</li>
//       </ul>
//     </div>
//   )
// }
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(<App/>);
//
// // üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// // –°–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ –≤–µ—Ç–æ–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ ?
// // –ú–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞ (–æ—Ç–≤–µ—Ç –¥–∞–π—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª).
// // ‚ùó –û—Ç–≤–µ—Ç –±—É–¥–µ—Ç –∑–∞—Å—á–∏—Ç–∞–Ω –∫–∞–∫ –≤–µ—Ä–Ω—ã–π, —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–æ–ª–Ω–æ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏.
// // –ï—Å–ª–∏ —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç (1),
// // –∞ –Ω—É–∂–Ω–æ –±—ã–ª–æ —É–∫–∞–∑–∞—Ç—å –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ (1 –∏ 2), —Ç–æ –æ—Ç–≤–µ—Ç –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –±—É–¥–µ—Ç –∑–∞—Å—á–∏—Ç–∞–Ω –∫–∞–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
//
// // üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: 1

// 5) +

// import ReactDOM from "react-dom/client"
// import { ThunkAction, ThunkDispatch } from "redux-thunk"
// import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from "react-redux"
// import React, { useEffect, useState } from "react"
// import axios from "axios"
// import { configureStore, combineReducers } from "@reduxjs/toolkit"
//
// type UserType = {
//   id: string
//   name: string
//   age: number
// }
//
// type UsersResponseType = {
//   items: UserType[]
//   totalCount: number
// }
//
// // API
// const instance = axios.create({ baseURL: "https://exams-frontend.kimitsu.it-incubator.io/api/" })
//
// const api = {
//   getUsers(search: string) {
//     return instance.get<UsersResponseType>(`users?name=${search}&pageSize=100`)
//   },
// }
//
// const initState = { users: [] as UserType[] }
// type InitStateType = typeof initState
//
// const appReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
//   switch (action.type) {
//     case "SET_USERS":
//       return { ...state, users: action.users }
//     default:
//       return state
//   }
// }
//
// // Store
// const rootReducer = combineReducers({ app: appReducer })
//
// const store = configureStore({ reducer: rootReducer })
// type RootState = ReturnType<typeof store.getState>
// type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>
// type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>
// const useAppDispatch = () => useDispatch<AppDispatch>()
// const useAppSelector: TypedUseSelectorHook<RootState> = useSelector
//
// const setUsersAC = (users: UserType[]) => ({ type: "SET_USERS", users }) as const
// type ActionsType = ReturnType<typeof setUsersAC>
//
// // Thunk
// const getFriends =
//   (name: string): AppThunk =>
//     (dispatch) => {
//       api.getUsers(name).then((res) => dispatch(setUsersAC(res.data.items)))
//     }
//
// export const Users = () => {
//   const users = useAppSelector((state) => state.app.users)
//   const dispatch = useAppDispatch()
//   const [name, setName] = useState("")
//   const [timerId, setTimerId] = useState(0)
//
//   useEffect(() => {
//     if (timerId) {
//       clearTimeout(timerId)
//     }
//     setTimerId(
//       +setTimeout(() => {
//         dispatch(getFriends(name))
//       }, 1500),
//     )
//   }, [name])
//
//   return (
//     <div>
//       <input value={name} onChange={(e) => setName(e.target.value)} />
//       {users.map((u) => {
//         return (
//           <div key={u.id}>
//             <p>
//               <b>name</b>: {u.name}
//             </p>
//           </div>
//         )
//       })}
//     </div>
//   )
// }
//
// const root = ReactDOM.createRoot(document.getElementById("root") as HTMLElement)
// root.render(
//   <Provider store={store}>
//     <Users />
//   </Provider>,
// )

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ù–∞ —ç–∫—Ä–∞–Ω–µ input, –∫—É–¥–∞ –º–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —Å–∏–º–≤–æ–ª—ã.
// –û—Ç–∫—Ä–æ–π—Ç–µ Network/ fetch/XHR –∏ –ø–æ—Ä–æ–±—É–π—Ç–µ –≤–≤–æ–¥–∏—Ç—å —Å–∏–º–≤–æ–ª—ã
// –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –≤–≤–æ–¥–∏—Ç–µ —É—Ö–æ–¥—è—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä -
// —ç—Ç–æ –ø–ª–æ—Ö–æ.
//
// ü™õ –ó–∞–¥–∞—á–∞: –ü–æ—á–∏–Ω–∏—Ç—å debounce
// –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –∫–æ–¥–∞ –∫–æ—Ç–æ—Ä—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å
// –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
//
// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: value={name(1500)}

// 7)+

// import ReactDOM from "react-dom/client"
// import { ThunkAction, ThunkDispatch } from "redux-thunk"
// import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from "react-redux"
// import React, { useEffect, useState } from "react"
// import axios from "axios"
// import { configureStore, combineReducers } from "@reduxjs/toolkit"
//
// // Styles
// const table: React.CSSProperties = {
//   borderCollapse: "collapse",
//   width: "100%",
//   tableLayout: "fixed",
// }
//
// const th: React.CSSProperties = {
//   padding: "10px",
//   border: "1px solid black",
//   background: "lightgray",
//   cursor: "pointer",
// }
//
// const td: React.CSSProperties = {
//   padding: "10px",
//   border: "1px solid black",
// }
//
// // Types
// type UserType = {
//   id: string
//   name: string
//   age: number
// }
//
// type UsersResponseType = {
//   items: UserType[]
//   totalCount: number
// }
//
// type ParamsType = {
//   sortBy: string | null
//   sortDirection: "asc" | "desc" | null
// }
//
// // API
// const instance = axios.create({ baseURL: "https://exams-frontend.kimitsu.it-incubator.io/api/" })
//
// const api = {
//   getUsers(params?: ParamsType) {
//     return instance.get<UsersResponseType>("users", { params })
//   },
// }
//
// // Reducer
// const initState = { users: [] as UserType[] }
// type InitStateType = typeof initState
//
// const appReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
//   switch (action.type) {
//     case "SET_USERS":
//       return { ...state, users: action.users }
//     default:
//       return state
//   }
// }

// Store
// const rootReducer = combineReducers({ app: appReducer })
//
// const store = configureStore({ reducer: rootReducer })
// type RootState = ReturnType<typeof store.getState>
// type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>
// type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>
// const useAppDispatch = () => useDispatch<AppDispatch>()
// const useAppSelector: TypedUseSelectorHook<RootState> = useSelector
//
// const setUsersAC = (users: UserType[]) => ({ type: "SET_USERS", users }) as const
// type ActionsType = ReturnType<typeof setUsersAC>
//
// // Thunk
// const getUsersTC =
//   (searchParams?: ParamsType): AppThunk =>
//   (dispatch) => {
//     api.getUsers(searchParams).then((res) => dispatch(setUsersAC(res.data.items)))
//   }
//
// export const Users = () => {
//   const [activeColumn, setActiveColumn] = useState<ParamsType>({
//     sortBy: null,
//     sortDirection: "asc",
//   })
//
//   const users = useAppSelector((state) => state.app.users)
//
//   const dispatch = useAppDispatch()
//
//   useEffect(() => {
//     dispatch(activeColumn.sortBy ? getUsersTC(activeColumn) : getUsersTC())
//   }, [activeColumn])
//
//   const sortHandler = (sortBy: string) => {
//     setActiveColumn({
//       sortBy: sortBy,
//       sortDirection: activeColumn.sortDirection === "asc" ? "desc" : "asc",
//     })
//   }
//
//   return (
//     <div>
//       <h1>üë™ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h1>
//       <table style={table}>
//         <thead>
//           <tr>
//             <th style={th} onClick={() => sortHandler("name")}>
//               Name
//               {activeColumn?.sortBy === "name" &&
//                 (activeColumn.sortDirection === "asc" ? <span> &#8593;</span> : <span> &#8595;</span>)}
//             </th>
//             <th style={th} onClick={() => sortHandler("age")}>
//               Age
//               {activeColumn?.sortBy === "age" &&
//                 (activeColumn.sortDirection === "asc" ? <span> &#8593;</span> : <span> &#8595;</span>)}
//             </th>
//           </tr>
//         </thead>
//         <tbody>
//           {users.map((u) => {
//             return (
//               <tr key={u.id}>
//                 <td style={td}>{u.name}</td>
//                 <td style={td}>{u.age}</td>
//               </tr>
//             )
//           })}
//         </tbody>
//       </table>
//     </div>
//   )
// }
//
// const root = ReactDOM.createRoot(document.getElementById("root") as HTMLElement)
// root.render(
//   <Provider store={store}>
//     <Users />
//   </Provider>,
// )

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü–µ—Ä–µ–¥ –≤–∞–º–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
// –í–∞—à–∞ –∑–∞–¥–∞—á–∞ –≤–º–µ—Å—Ç–æ XXX –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∏–º–µ–Ω–∏ –∏ –≤–æ–∑—Ä–∞—Å—Ç—É.
// –¢.–µ. –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ name –ª–∏–±–æ age –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–ª–∂–Ω—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Ç–∞–±–ª–∏—Ü–µ.
// –ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —ç—Ç–æ—Ç –∂–µ —Å—Ç–æ–ª–±–µ—Ü —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
// –ü—Ä–∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –Ω–∞–∂–∞—Ç–∏—è—Ö —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å—Å—è, –∞ –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è.
// ‚ùó —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, —Ç.–µ. sort –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ
// ‚ùó –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–∞–ø–∏—Å—å –≤–∏–¥–∞ setState(prevState => ...), –ø–µ—Ä–µ–¥–∞–π—Ç–µ –≤ setActiveColumn –æ–±—ä–µ–∫—Ç

// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: sort(a, b)
